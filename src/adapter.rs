use std::net::{SocketAddr};
use crate::resource_id::{ResourceId, ResourceIdGenerator};

/// Information to identify the remote endpoint.
/// The endpoint is used mainly as a connection identified.
#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
pub struct Endpoint {
    resource_id: ResourceId,
    addr: SocketAddr,
}

impl Endpoint {
    pub fn new(resource_id: ResourceId, addr: SocketAddr) -> Self {
        Self { resource_id, addr }
    }

    /// Returns the inner network resource id associated used for the endpoint.
    /// It is not necessary to be unique for each endpoint if some of them shared the resource
    /// (an example of this is the different endpoints generated by the a UDP Listener).
    pub fn resource_id(&self) -> ResourceId {
        self.resource_id
    }

    /// Returns the remote address of the endpoint
    pub fn addr(&self) -> SocketAddr {
        self.addr
    }
}

/// Internal adapter event
#[derive(Debug)]
pub enum AdapterEvent<'a> {
    Connection,
    Data(&'a [u8]),
    Disconnection,
}

pub trait TransportAdapter {
    type Listener;
    type Remote;

    fn init<C>(id_generator: ResourceIdGenerator, event_callback: C) -> Self where
        C: for<'b> FnMut(Endpoint, AdapterEvent<'b>) + Send + 'static;

    fn add_listener(&mut self, listener: Self::Listener) -> (ResourceId, SocketAddr);
    fn add_remote(&mut self, remote: Self::Remote) -> Endpoint;
    fn remove_listener(&mut self, resource_id: ResourceId) -> Option<()>;
    fn remove_remote(&mut self, resource_id: ResourceId) -> Option<()>;
    fn local_address(&self, resource_id: ResourceId) -> Option<SocketAddr>;
    fn send(&mut self, endpoint: Endpoint, data: &[u8]);
}
