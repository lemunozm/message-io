use crate::endpoint::{Endpoint};
use crate::resource_id::{ResourceId};
use crate::poll::{PollRegister};
use crate::util::{SendingStatus};

use std::net::{SocketAddr};
use std::io::{self};

/// Struct used to pack the events generated by the adapter.
/// The upper layer will traduce this event into a [crate::network::NetEvent]
/// that the user can manage.
pub enum AdapterEvent<'a> {
    Added,
    Data(&'a [u8]),
    Removed,
}

/// High level trait to represent an adapter for a transport protocol.
/// The adapter is used to pack a [`Controller`] and [`Adapter`].
/// Two traits to describes how an adapter behaves.
pub trait Adapter<C>
where C: FnMut(Endpoint, AdapterEvent<'_>)
{
    type Controller: Controller + Send;
    type Processor: Processor<C> + Send;

    /// Creates a [`Controller`] and [`Processor`] that represents the adapter.
    /// The **implementator** must create their [`Controller`] and [`Processor`] here.
    fn split(self, poll_register: PollRegister) -> (Self::Controller, Self::Processor);
}

/// It is in change to perform direct actions from the user.
pub trait Controller {
    /// The user performs a connection request to an specific address.
    /// The **implementator** is in change of creating the corresponding instance in order
    /// to manage it later.
    fn connect(&mut self, addr: SocketAddr) -> io::Result<Endpoint>;

    /// The user performs a listening request from an specific address.
    /// The **implementator** is in change of creating the corresponding instance in order
    /// to manage it later.
    fn listen(&mut self, addr: SocketAddr) -> io::Result<(ResourceId, SocketAddr)>;

    /// The user performs a remove action in order to remove a resource generated by
    /// [connect()] and [listen()] functions.
    /// The **implementator** must remove the resource here.
    fn remove(&mut self, id: ResourceId) -> Option<()>;

    /// The user wants to get the local address of some resource (listener or remote).
    /// The **implementator** must return that address or None if the resource is not found.
    /// Note: The *peer* address can be retreived from the Endpoint that the user already has.
    fn local_addr(&self, id: ResourceId) -> Option<SocketAddr>;

    /// Sends a raw message by the specific endpoint.
    /// The **implementator** is in charge to send the `data` using the instance represented by
    /// `endpoint.resource_id()`.
    fn send(&mut self, endpoint: Endpoint, data: &[u8]) -> SendingStatus;
}

/// It is in change to perform eventual actions comming from the internal network engine.
/// The `event_callback` is the action that will be performed when an [AdapterEvent] is
/// generated for some `Endpoint`.
/// This function will be produce the [create::network::NetEvent].
pub trait Processor<C>
where C: FnMut(Endpoint, AdapterEvent<'_>)
{
    /// Called when a listener received an event.
    /// It means that an endpoint has try to connect and the connection should accept.
    /// The `id` represents the listener that have generated the event.
    /// The **implementator** is in charge of retrive the instance represented by this `id`
    /// to accept that connection.
    fn process_listener(&mut self, id: ResourceId, event_callback: &mut C);

    /// Called when a remote endpoint received an event.
    /// It means that the endpoint has available data to read,
    /// or there is some connection related issue, as a disconnection.
    /// The `id` represents the remote entity that has generated the event.
    /// The **implementator** is in charge of retrive the instance represented by this `id`
    /// and process the event.
    fn process_remote(&mut self, id: ResourceId, event_callback: &mut C);
}
